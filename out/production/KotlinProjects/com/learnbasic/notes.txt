 OOPS Concept:
 Object-Oriented Programming System
 Object-oriented programming has several advantages over procedural programming:

 OOP is faster and easier to execute
 OOP provides a clear structure for the programs
 OOP helps to keep the Kotlin code DRY "Don't Repeat Yourself", and makes the code easier to maintain, modify and debug
 OOP makes it possible to create full reusable applications with less code and shorter development time


 Kotlin Classes/Objects

Object:
 Any entity that has state and behavior is known as an object.
 For example, a chair, pen, table, keyboard, bike, etc. It can be physical or logical.

 An Object can be defined as an instance of a class.
 An object contains an address and takes up some space in memory.

 Syntax:
 var obj= Classname()

 Class:
 Collection of objects is called class. It is a logical entity.
 A class can also be defined as a blueprint from which you can create an individual object.
 Class doesn't consume any space.

 Syntax:
 Class Classname(){

  }

Constructor:
It is a special type of method which is used to initialize the object.

There are two constructor
1.Primary constructor
2.Secondary constructor

1.Primary Constructor
->It is declared as a part of the class header.
//Primary Constructor
class Person(private val name:String, private val age:Int){

    fun display(){
        println("He is $name and his age is $age.")
    }

}

fun main(){
    var fper=Person("Aditya",16)
    fper.display()
    var sper=Person("Buddhadeb",15)
    sper.display()
    var tper=Person("Akash",25)
    tper.display()
}

Initalizer Block:


Secondary constructor:
//Secondary Constructor
class  Pen {

    var color:String
    var price:Int

    constructor(color: String, price: Int) {
        this.color=color
        this.price=price

    }

    fun Display(){
        println("The pen color is $color and pen price is $price")
    }
}
fun main(){
 var fpen=Pen("Red",5)
    fpen.Display()
 var spen=Pen("Blue",10)
    spen.Display()
 var tpen=Pen("Black",25)
    tpen.Display()
}


Inheritance:
When one object acquires all the properties and behaviors of a parent object, it is known as inheritance.
It provides code reusability. It is used to achieve runtime polymorphism.

Parent class is known as Super class/Base Class.

Child class is known as Sub class /Derived class.

Overriding
______________________________________________________________________

Abstract class:
Abstract class is incomplete class which can contain at least one abstract method.

Abstraction:
Hiding internal details and showing functionality is known as abstraction.
For example phone call, we don't know the internal processing.

Interfaces



